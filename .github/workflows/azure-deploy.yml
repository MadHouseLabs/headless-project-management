name: Build and Deploy to Azure

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AZURE_CONTAINER_APP_NAME: headless-pm-app
  AZURE_RESOURCE_GROUP: headless-pm-rg
  AZURE_CONTAINER_ENV: headless-pm-env

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Apps
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Create YAML configuration for container app with volume mount
            cat > container-app-config.yaml << EOF
            properties:
              configuration:
                secrets:
                - name: admin-api-token
                  value: "${{ secrets.ADMIN_API_TOKEN }}"
                - name: azure-openai-key
                  value: "${{ secrets.AZURE_OPENAI_API_KEY }}"
                ingress:
                  external: true
                  targetPort: 8080
                  transport: auto
                  allowInsecure: false
              template:
                containers:
                - name: headless-pm-app
                  image: ghcr.io/madhouselabs/headless-project-management:latest
                  resources:
                    cpu: 0.5
                    memory: 1Gi
                  env:
                  - name: SERVER_HOST
                    value: "0.0.0.0"
                  - name: SERVER_PORT
                    value: "8080"
                  - name: DATABASE_DIR
                    value: "/data/db"
                  - name: UPLOAD_DIR
                    value: "/data/uploads"
                  - name: MCP_ENABLED
                    value: "true"
                  - name: ADMIN_API_TOKEN
                    secretRef: admin-api-token
                  - name: AZURE_OPENAI_ENDPOINT
                    value: "https://klhub-resource.openai.azure.com/"
                  - name: AZURE_OPENAI_API_KEY
                    secretRef: azure-openai-key
                  - name: AZURE_OPENAI_EMBEDDING_DEPLOYMENT
                    value: "embeds"
                  volumeMounts:
                  - volumeName: azure-files-volume
                    mountPath: /data
                scale:
                  minReplicas: 1
                  maxReplicas: 3
                volumes:
                - name: azure-files-volume
                  storageType: AzureFile
                  storageName: azurefiles
            EOF

            # Update or create the container app with volume mount
            az containerapp update \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --yaml container-app-config.yaml \
              2>/dev/null || \
            az containerapp create \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.AZURE_CONTAINER_ENV }} \
              --yaml container-app-config.yaml

            # Get the app URL
            echo "Application URL:"
            az containerapp show \
              --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query "properties.configuration.ingress.fqdn" \
              -o tsv | sed 's/^/https:\/\//'