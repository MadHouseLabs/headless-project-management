# Optimized CI/CD Pipeline with Caching
#
# Performance optimizations:
# 1. Go modules cached using setup-go's built-in cache
# 2. Go build cache for faster compilation
# 3. Node.js dependencies cached for web assets
# 4. Docker layer caching using GitHub Actions cache
# 5. Go binary built outside container to leverage caching
# 6. Minimal final Docker image (no build tools)
#
# This reduces build time from ~5-10 minutes to ~1-2 minutes after initial cache

name: Deploy to Azure VM

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: madhouselabs/headless-project-management
  GO_VERSION: '1.23'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ sqlite3 libsqlite3-dev

    - name: Cache Go build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: web/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('web/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Build web assets
      run: |
        cd web
        npm ci --prefer-offline
        npm run build

    - name: Download Go dependencies
      run: go mod download

    - name: Build Go binary
      env:
        CGO_ENABLED: 1
        GOOS: linux
        GOARCH: amd64
      run: |
        go build -ldflags="-w -s" -o server cmd/server/main.go
        chmod +x server
        # Display binary size for monitoring
        ls -lh server

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          latest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Setup Docker certificates
      run: |
        mkdir -p ~/.docker
        echo "${{ secrets.DOCKER_CA_PEM }}" > ~/.docker/ca.pem
        echo "${{ secrets.DOCKER_CERT_PEM }}" > ~/.docker/cert.pem
        echo "${{ secrets.DOCKER_KEY_PEM }}" > ~/.docker/key.pem
        chmod 600 ~/.docker/key.pem

    - name: Deploy to Azure VM
      env:
        DOCKER_HOST: tcp://pm-instance.khost.dev:2376
        DOCKER_TLS_VERIFY: 1
        DOCKER_CERT_PATH: /home/runner/.docker
      run: |
        # Stop and remove existing container first
        docker stop headless-pm || true
        docker rm headless-pm || true

        # Remove the old image to force a fresh download
        docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true

        # Pull the latest image (will always download fresh since we removed it)
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

        # Run new container with the fresh image
        docker run -d \
          --name headless-pm \
          --restart unless-stopped \
          --network app-network \
          -v /opt/headless-pm/data:/data \
          -e SERVER_HOST=0.0.0.0 \
          -e SERVER_PORT=8080 \
          -e DATABASE_DIR=/data \
          -e UPLOAD_DIR=/data/uploads \
          -e MCP_ENABLED=true \
          -e ADMIN_API_TOKEN=e4Cvk3VipNSzU6vj3liF5nNpg9RBpo3uC3SZDyFegs4= \
          -e AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
          -e AZURE_OPENAI_API_KEY="${{ secrets.AZURE_OPENAI_API_KEY }}" \
          -e AZURE_OPENAI_EMBEDDING_DEPLOYMENT="${{ secrets.AZURE_OPENAI_EMBEDDING_DEPLOYMENT }}" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

        # Verify container is running
        sleep 5
        docker ps | grep headless-pm || exit 1

        # Clean up old images
        docker image prune -af --filter "until=24h"